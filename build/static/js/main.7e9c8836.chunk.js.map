{"version":3,"sources":["styles/global.ts","pages/Hexcolor/styles.ts","pages/Hexcolor/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","Container","styled","div","Content","props","color","lighten","Color","isLighten","Hexcolor","useState","setColor","setIsLighten","rand","useCallback","minimal","max","Math","round","random","randomIndex","codeHex","length","generateColor","hex","i","getLuminance","useEffect","size","type","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"opBAEeA,kBAAf,K,uiDCUO,IAAMC,EAAYC,IAAOC,IAAV,KASTC,EAAUF,IAAOC,IAAV,KA8BP,SAAAE,GAAK,OAAIA,EAAMC,SAIb,SAAAD,GAAK,OAAIA,EAAMC,QAuBVC,YAAQ,GAAK,YAKpBC,EAAQN,IAAOC,IAAV,KAEF,SAAAE,GAAK,OAAIA,EAAMC,SAYlB,SAAAD,GAAK,OAAIA,EAAMI,UAAY,UAAY,aCtBrCC,EApEY,WAAO,IAAD,EACLC,mBAAS,IADJ,mBACxBL,EADwB,KACjBM,EADiB,OAEGD,oBAAS,GAFZ,mBAExBF,EAFwB,KAEbI,EAFa,KAIzBC,EAAOC,uBAAY,SAACC,EAAiBC,GACzC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAYA,IACpD,IAEGK,EAAcN,uBAClB,SAACO,GACC,OAAOR,EAAK,EAAGQ,EAAQC,OAAS,KAElC,CAACT,IAGGU,EAAgBT,uBAAY,WAoBhC,IAnBA,IAAMO,EAAU,CACd,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGEG,EAAM,IACDC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1BD,GAAOH,EADQD,EAAYC,IAI7BT,EAAac,YAAaF,GAAO,KACjCb,EAASa,KACR,CAACJ,IAMJ,OAJAO,qBAAU,WACRJ,MACC,CAACA,IAGF,cAACvB,EAAD,UACE,eAACG,EAAD,CAASE,MAAOA,EAAhB,UACE,cAACE,EAAD,CAAOF,MAAOA,EAAOG,UAAWA,EAAhC,SACE,cAAC,IAAD,CAAiCoB,KAAM,OAEzC,oDAEA,+BACGvB,IAGH,wBAAQwB,KAAK,SAASC,QAASP,EAA/B,yBCpDOQ,EATO,WACpB,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCNNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e9c8836.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  *{\n    margin:0;\n    padding: 0;\n    box-sizing: border-box;\n    outline: 0;\n  }\n\n  body{\n    background: #f4f4f2;\n    color:#fff;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button{\n    font-family:'Roboto Slab', serif;\n    font-size: 16px;\n  }\n\n  h1, h2, h3, h4, h5,h6, strong {\n    font-weight: 500;\n  }\n\n  button{\n    cursor: pointer;\n  }\n`;\n","import styled from 'styled-components';\nimport { lighten } from 'polished';\n\ninterface PropsContent {\n  color: string;\n}\n\ninterface PropsColor {\n  color: string;\n  isLighten: boolean;\n}\n\nexport const Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Content = styled.div<PropsContent>`\n  background: #fff;\n  border: 1px solid #e8e8e8;\n  border-radius: 5px;\n  width: 100%;\n  max-width: 660px;\n  padding: 40px;\n\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n  position: relative;\n\n  h1 {\n    color: #495464;\n    margin-top: 48px;\n    text-transform: uppercase;\n  }\n\n  span {\n    padding: 8px 16px;\n    font-weight: 500;\n    font-size: 24px;\n    margin: 16px 0;\n\n    transition: color 0.5s;\n\n    display: flex;\n    align-items: center;\n    color: ${props => props.color};\n\n    svg {\n      cursor: pointer;\n      color: ${props => props.color};\n      margin-left: 16px;\n    }\n  }\n\n  button {\n    width: 100%;\n    padding: 16px 0;\n    margin-top: 1px;\n    border: 0;\n    background: #495464;\n    color: #f1f6f9;\n    font-weight: 500;\n    font-size: 22px;\n    border: 1px solid #eee;\n\n    text-transform: uppercase;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.5s;\n\n    &:hover {\n      background: ${lighten(0.1, '#495464')};\n    }\n  }\n`;\n\nexport const Color = styled.div<PropsColor>`\n  position: absolute;\n  background: ${props => props.color};\n  transition: background-color 0.5s;\n\n  display: flex;\n\n  padding: 40px;\n  border-radius: 50%;\n  top: 0;\n  margin: 0;\n  margin-top: -85px;\n\n  svg{\n    color: ${props => props.isLighten ? '#495464' : '#ffffff'}\n  }\n`;\n","import React, { useCallback, useState, useEffect } from 'react';\n\nimport { getLuminance } from 'polished';\n\nimport { GiPerspectiveDiceSixFacesRandom } from 'react-icons/gi';\nimport { Container, Content, Color } from './styles';\n\nconst Hexcolor: React.FC = () => {\n  const [color, setColor] = useState('');\n  const [isLighten, setIsLighten] = useState(false);\n\n  const rand = useCallback((minimal: number, max: number) => {\n    return Math.round(Math.random() * (max - minimal)) + minimal;\n  }, []);\n\n  const randomIndex = useCallback(\n    (codeHex: Array<String>) => {\n      return rand(0, codeHex.length - 1);\n    },\n    [rand],\n  );\n\n  const generateColor = useCallback(() => {\n    const codeHex = [\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      'A',\n      'B',\n      'C',\n      'D',\n      'E',\n      'F',\n    ];\n\n    let hex = '#';\n    for (let i = 0; i < 6; i++) {\n      const iIndex = randomIndex(codeHex);\n      hex += codeHex[iIndex];\n    }\n\n    setIsLighten(getLuminance(hex) > 0.65);\n    setColor(hex);\n  }, [randomIndex]);\n\n  useEffect(() => {\n    generateColor();\n  }, [generateColor]);\n\n  return (\n    <Container>\n      <Content color={color}>\n        <Color color={color} isLighten={isLighten}>\n          <GiPerspectiveDiceSixFacesRandom size={80} />\n        </Color>\n        <h1>Hexcolor Generator</h1>\n\n        <span>\n          {color}\n        </span>\n\n        <button type=\"button\" onClick={generateColor}>\n          Gerar\n        </button>\n      </Content>\n    </Container>\n  );\n};\n\nexport default Hexcolor;\n","import React from 'react';\n\nimport GloabalStyle from './styles/global';\n\nimport Hexcolor from './pages/Hexcolor';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Hexcolor />\n      <GloabalStyle />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}