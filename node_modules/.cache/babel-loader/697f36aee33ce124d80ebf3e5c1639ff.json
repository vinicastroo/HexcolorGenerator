{"ast":null,"code":"import _slicedToArray from\"/home/vinicastro/\\xC1rea de Trabalho/Projetos/HexcolorGenerator/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useCallback,useState,useEffect}from'react';import{getLuminance}from'polished';import{GiPerspectiveDiceSixFacesRandom}from'react-icons/gi';import{Container,Content,Color}from'./styles';var Hexcolor=function Hexcolor(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),color=_useState2[0],setColor=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLighten=_useState4[0],setIsLighten=_useState4[1];var rand=useCallback(function(minimal,max){return Math.round(Math.random()*(max-minimal))+minimal;},[]);var randomIndex=useCallback(function(codeHex){return rand(0,codeHex.length-1);},[rand]);var generateColor=useCallback(function(){var codeHex=['1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];var hex='#';for(var i=0;i<6;i++){var iIndex=randomIndex(codeHex);hex+=codeHex[iIndex];}setIsLighten(getLuminance(hex)>0.65);setColor(hex);},[randomIndex]);useEffect(function(){generateColor();},[generateColor]);return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(Content,{color:color,children:[/*#__PURE__*/_jsx(Color,{color:color,isLighten:isLighten,children:/*#__PURE__*/_jsx(GiPerspectiveDiceSixFacesRandom,{size:80})}),/*#__PURE__*/_jsx(\"h1\",{children:\"Hexcolor Generator\"}),/*#__PURE__*/_jsx(\"span\",{children:color}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:generateColor,children:\"Gerar\"})]})});};export default Hexcolor;","map":{"version":3,"sources":["/home/vinicastro/Área de Trabalho/Projetos/HexcolorGenerator/src/pages/Hexcolor/index.tsx"],"names":["React","useCallback","useState","useEffect","getLuminance","GiPerspectiveDiceSixFacesRandom","Container","Content","Color","Hexcolor","color","setColor","isLighten","setIsLighten","rand","minimal","max","Math","round","random","randomIndex","codeHex","length","generateColor","hex","i","iIndex"],"mappings":"0OAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,QAA7B,CAAuCC,SAAvC,KAAwD,OAAxD,CAEA,OAASC,YAAT,KAA6B,UAA7B,CAEA,OAASC,+BAAT,KAAgD,gBAAhD,CACA,OAASC,SAAT,CAAoBC,OAApB,CAA6BC,KAA7B,KAA0C,UAA1C,CAEA,GAAMC,CAAAA,QAAkB,CAAG,QAArBA,CAAAA,QAAqB,EAAM,eACLP,QAAQ,CAAC,EAAD,CADH,wCACxBQ,KADwB,eACjBC,QADiB,8BAEGT,QAAQ,CAAC,KAAD,CAFX,yCAExBU,SAFwB,eAEbC,YAFa,eAI/B,GAAMC,CAAAA,IAAI,CAAGb,WAAW,CAAC,SAACc,OAAD,CAAkBC,GAAlB,CAAkC,CACzD,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,OAAvB,CAAX,EAA8CA,OAArD,CACD,CAFuB,CAErB,EAFqB,CAAxB,CAIA,GAAMK,CAAAA,WAAW,CAAGnB,WAAW,CAC7B,SAACoB,OAAD,CAA4B,CAC1B,MAAOP,CAAAA,IAAI,CAAC,CAAD,CAAIO,OAAO,CAACC,MAAR,CAAiB,CAArB,CAAX,CACD,CAH4B,CAI7B,CAACR,IAAD,CAJ6B,CAA/B,CAOA,GAAMS,CAAAA,aAAa,CAAGtB,WAAW,CAAC,UAAM,CACtC,GAAMoB,CAAAA,OAAO,CAAG,CACd,GADc,CAEd,GAFc,CAGd,GAHc,CAId,GAJc,CAKd,GALc,CAMd,GANc,CAOd,GAPc,CAQd,GARc,CASd,GATc,CAUd,GAVc,CAWd,GAXc,CAYd,GAZc,CAad,GAbc,CAcd,GAdc,CAed,GAfc,CAAhB,CAkBA,GAAIG,CAAAA,GAAG,CAAG,GAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAxB,CAA4B,CAC1B,GAAMC,CAAAA,MAAM,CAAGN,WAAW,CAACC,OAAD,CAA1B,CACAG,GAAG,EAAIH,OAAO,CAACK,MAAD,CAAd,CACD,CAEDb,YAAY,CAACT,YAAY,CAACoB,GAAD,CAAZ,CAAoB,IAArB,CAAZ,CACAb,QAAQ,CAACa,GAAD,CAAR,CACD,CA3BgC,CA2B9B,CAACJ,WAAD,CA3B8B,CAAjC,CA6BAjB,SAAS,CAAC,UAAM,CACdoB,aAAa,GACd,CAFQ,CAEN,CAACA,aAAD,CAFM,CAAT,CAIA,mBACE,KAAC,SAAD,wBACE,MAAC,OAAD,EAAS,KAAK,CAAEb,KAAhB,wBACE,KAAC,KAAD,EAAO,KAAK,CAAEA,KAAd,CAAqB,SAAS,CAAEE,SAAhC,uBACE,KAAC,+BAAD,EAAiC,IAAI,CAAE,EAAvC,EADF,EADF,cAIE,0CAJF,cAME,sBACGF,KADH,EANF,cAUE,eAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAEa,aAA/B,mBAVF,GADF,EADF,CAkBD,CAlED,CAoEA,cAAed,CAAAA,QAAf","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\n\nimport { getLuminance } from 'polished';\n\nimport { GiPerspectiveDiceSixFacesRandom } from 'react-icons/gi';\nimport { Container, Content, Color } from './styles';\n\nconst Hexcolor: React.FC = () => {\n  const [color, setColor] = useState('');\n  const [isLighten, setIsLighten] = useState(false);\n\n  const rand = useCallback((minimal: number, max: number) => {\n    return Math.round(Math.random() * (max - minimal)) + minimal;\n  }, []);\n\n  const randomIndex = useCallback(\n    (codeHex: Array<String>) => {\n      return rand(0, codeHex.length - 1);\n    },\n    [rand],\n  );\n\n  const generateColor = useCallback(() => {\n    const codeHex = [\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      'A',\n      'B',\n      'C',\n      'D',\n      'E',\n      'F',\n    ];\n\n    let hex = '#';\n    for (let i = 0; i < 6; i++) {\n      const iIndex = randomIndex(codeHex);\n      hex += codeHex[iIndex];\n    }\n\n    setIsLighten(getLuminance(hex) > 0.65);\n    setColor(hex);\n  }, [randomIndex]);\n\n  useEffect(() => {\n    generateColor();\n  }, [generateColor]);\n\n  return (\n    <Container>\n      <Content color={color}>\n        <Color color={color} isLighten={isLighten}>\n          <GiPerspectiveDiceSixFacesRandom size={80} />\n        </Color>\n        <h1>Hexcolor Generator</h1>\n\n        <span>\n          {color}\n        </span>\n\n        <button type=\"button\" onClick={generateColor}>\n          Gerar\n        </button>\n      </Content>\n    </Container>\n  );\n};\n\nexport default Hexcolor;\n"]},"metadata":{},"sourceType":"module"}